@using Components.Managers
@inject IData MockData
@inject ISessionService SessionManager
@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">WebSite</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        @if (!isAuthenticated) {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
                </NavLink>
            </div>
        }        
        @if (isAdmin && isAuthenticated) {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="dashboard" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Dashboard
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="questions">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Question Overview
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="HSEQuestionPage">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> HSE
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="useradministration">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> User Administration
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="creategroup">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Create Group
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="roleadministration">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Role Administration
                </NavLink>
            </div>
        }
        @if (isHSE && isAuthenticated) {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="dashboard" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Dashboard
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="HSEQuestionPage">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> HSE
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="answers">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Answers
                </NavLink>
            </div>
        }

        <div class="nav-item px-3">
            <NavLink class="nav-link" @onclick="Logout">
                <span class="oi oi-account-logout" aria-hidden="true"></span> Logout
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool isAuthenticated { get; set; }
    private bool isAdmin { get; set; }
    private bool isHSE { get; set; }

    protected override async Task OnInitializedAsync() {
        await LoadUserState();
        SessionManager.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async Task LoadUserState() {
        isAuthenticated = SessionManager.GetAuthenticationState();
        isAdmin = SessionManager.IsAdmin();
        isHSE = SessionManager.IsHSEAdmin();
    }

    private async void OnAuthenticationStateChanged() {
        await InvokeAsync(async () => {
            await LoadUserState();
            StateHasChanged();
        });
    }

    private void Logout() {
        // Call the logout method from your authentication service
        ((SessionManager)SessionManager).MarkUserAsLoggedOut();
        // Redirect the user to the login page
        NavigationManager.NavigateTo("/login");
    }

    public void Dispose() {
        SessionManager.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}