@page "/login"
@using Models
@using global::WebSite.Components.Managers
@inject NavigationManager NavigationManager
@inject IData Data
@inject ISessionService ServiceManager

<h3>Login</h3>

@if (!isAuthenticated) {
    <form>
        <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" id="email" class="form-control" @bind="user.User.UserName" />
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <input type="password" id="password" class="form-control" @bind="user.User.Password" />
        </div>
        @if (!isAuthenticated && !string.IsNullOrEmpty(errorMessage)) {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
        <button type="button" class="btn btn-primary" @onclick="Submit">Login</button>
    </form>
}

@code {
    private bool isAuthenticated { get; set; } = false;
    private string errorMessage { get; set; }
    private TokenUser user { get; set; }

    [Inject]
    ISessionService SessionManager { get; set; }

    protected override async Task OnInitializedAsync() {
        user = new TokenUser { User = new User {
                    Area = new Area(),
                    Country = new Country(),
                    Password = "",
                    Id = 0,
                    Role = new RoleModel(),
                    UserName = ""
        }            
        };    
        if (isAuthenticated) {
            // Redirect to another page if the user is already authenticated
            NavigationManager.NavigateTo("/dashboard");
        }

        base.OnInitialized();
    }

    private async Task Submit() {
        if (user.User.UserName == "admin" && user.User.Password == "admin") {
            Area _area = new Area { Id = 1, PossibleArea = "Test Area" };
            Country _country = new Country { Id = 1, PossibleCountry = "Test Country" };
            List <Question> _questions = new List<Question> {
            new Question {
                Id = 1,
                PossibleQuestion = "What is your favorite color?",
                Options = new List<Option>
                {
                    new Option { Id = 1, PossibleOption = "Red" },
                    new Option { Id = 2, PossibleOption = "Blue" },
                    new Option { Id = 3, PossibleOption = "Green" }
                }
            },
            new Question {
                Id = 2,
                PossibleQuestion = "How old are you?",
                Options = null // No predefined options for this question
            }
            };
            QuestionGroup q = new QuestionGroup() {
                    Id = 1,
                    Questions = _questions,
                    Area = _area,
                    Country = _country
                };
            RoleModel _role = new RoleModel {
                    Id = 1,
                    Name = "admin"
                };
            user.User.Area = _area;
            user.User.Country = _country;
            user.User.Role = _role;
            user.Token = "AdminTestToken";
            SessionManager.MarkUserAsAuthenticated(user.User, q, user.Token);
        }

        user = Data.GetUser(user.User.UserName, user.User.Password);
        if (user == null) {            
            user = new TokenUser { User = new User {
                        Area = new Area(),
                        Country = new Country(),
                        Password = "",
                        Id = 0,
                        Role = new RoleModel(),
                        UserName = ""
            }                    
            };
            return; // Implement error handling
        }
        QuestionGroup questionGroup = Data.GetQuestionGroup(user.User.Area.Id, user.User.Country.Id);
        SessionManager.MarkUserAsAuthenticated(user.User, questionGroup, user.Token);
        if (SessionManager.GetAuthenticationState()) {
            NavigationManager.NavigateTo("/dashboard");
        }
    }

}
