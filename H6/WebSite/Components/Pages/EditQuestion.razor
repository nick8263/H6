@page "/editQuestion/{QuestionId}"

@using Models
@inject NavigationManager NavigationManager
@inject MockData MockData

<h3>Edit Question</h3>

@if (question == null) {
    <p>Loading...</p>
} else {
    <div class="form-group">
        <label for="question">Question:</label>
        <input type="text" class="form-control" @bind="question.PossibleQuestion">
    </div>

    @if (question.Options != null) {
        @foreach (Option o in question.Options) {
            <div class="form-group">
                <label for="option">Option:</label>
                <input type="text" class="form-control" @bind="o.PossibleOption">
                <button type="button" class="btn btn-danger" @onclick="(e) => RemoveOption(o)">Remove Option</button>
            </div>
        }
        <div>
            <button type="button" class="btn btn-primary" @onclick="AddOption">Add Option</button>
        </div>
    }

    <div>
        <button type="button" class="btn btn-primary" @onclick="SaveChanges">Save Changes</button>
    </div>
}

@code {
    [Parameter]
    public string QuestionId { get; set; }

    Question question;

    protected override async Task OnInitializedAsync() {
        int id = Int32.Parse(QuestionId);
        question = MockData.GetQuestion(id);
    }

    void ToggleOptions(ChangeEventArgs e) {
        bool predefinedOptions = (bool)e.Value;
        if (predefinedOptions) {
            if (!question.Options.Any()) {
                question.Options.Add(new Option());
            }
        } else {
            question.Options.Clear();
        }
    }

    void RemoveOption(Option o) {
        question.Options.Remove(o);
    }

    void AddOption() {
        question.Options.Add(new Option());
    }

    void SaveChanges() {
        // Update question in database
        NavigationManager.NavigateTo("/questions");
    }
}
