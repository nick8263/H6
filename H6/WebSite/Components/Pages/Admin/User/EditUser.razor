@page "/edituser/{Id}"

@using Models
@using Components.Managers

@inject ISessionService SessionManager
@inject IData Data
@inject NavigationManager NavigationManager

@if (isAdmin) {
    <h3>EditUser</h3>

    @if (user == null) {
        <p>Loading...</p>
    } else {
        <div class="form-group">
            <label for="question">Username:</label>
            <input type="text" class="form-control" @bind="user.UserName">
        </div>
        <div class="form-group">
            <label for="country">Country:</label>
            <select class="form-control" @bind="user.Country.Id">
                <option value="">Select Country</option>
                @if (countries != null && countries.Count > 0) {
                    @foreach (var country in countries) {
                        <option value="@country.Id">@country.PossibleCountry</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label for="area">Area:</label>
            <select class="form-control" @bind="user.Area.Id">
                <option value="">Select Area</option>
                @if (areas != null && areas.Count > 0) {
                    @foreach (var area in areas) {
                        <option value="@area.Id">@area.PossibleArea</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label for="area">Role:</label>
            <select class="form-control" @bind="user.Role.Id">
                <option value="">Select Area</option>
                @if (roles != null && roles.Count > 0) {
                    @foreach (var role in roles) {
                        <option value="@role.Id">@role.Name</option>
                    }
                }
            </select>
        </div>

        <div>
            <button type="button" class="btn btn-primary" @onclick="SaveChanges">Save Changes</button>
        </div>
    }
} else {
    <p>Not authorized</p>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private User user;
    private string token;

    private List<Country> countries { get; set; } = new List<Country>();
    private List<Area> areas { get; set; } = new List<Area>();
    private List<RoleModel> roles { get; set; } = new List<RoleModel>();

    private bool isAdmin;

    protected override async Task OnInitializedAsync() {
        token = SessionManager.GetToken();
        isAdmin = SessionManager.IsAdmin();
        int userId = Int32.Parse(Id);
        user = await Data.GetUser(userId, token);
        countries = await Data.GetCountries(token);
        areas = await Data.GetAreas(token);
        roles = await Data.GetRoles(token);
        
    }

    void SaveChanges() {
        // Update question in database
        user.Area = areas.FirstOrDefault(a => a.Id == user.Area.Id);
        user.Country = countries.FirstOrDefault(c => c.Id == user.Country.Id);
        user.Role = roles.FirstOrDefault(r => r.Id == user.Role.Id);
        TokenUser toUpdate = new TokenUser
        {
            Token = token,
            User = user
        };
        Data.UpdateUser(toUpdate);
        NavigationManager.NavigateTo("/useradministration");
    }
}
