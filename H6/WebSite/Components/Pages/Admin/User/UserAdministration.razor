@page "/useradministration"

@using Models
@using Components.Managers

@inject IData Data
@inject ISessionService SessionManager
@inject NavigationManager NavigationManager

@if (isAdmin) {
    <h3>User Administration</h3>

    <button class="btn btn-success" @onclick="CreateUser">Create new user</button>

    @if (users != null && users.Count > 0) {
        <table class="table">
            <thead>
                <tr>
                    <th>Username</th>
                    <th>Role</th>
                    <th>Area</th>
                    <th>Country</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users) {
                    <tr>
                        <td>@user.UserName</td>
                        <td>@user.Role.Name</td>
                        <td>@user.Area.PossibleArea</td>
                        <td>@user.Country.PossibleCountry</td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => DeleteUser(user)">Delete</button>
                            <button class="btn btn-primary" @onclick="() => EditUser(user)">Edit</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
} else {
    <p>Not authorized</p>
}

@code {
    private List<User> users;
    private bool isAdmin;
    private string token;

    protected override async Task OnInitializedAsync() {
        token = SessionManager.GetToken();
        isAdmin = SessionManager.IsAdmin();
        users = await Data.GetUsers(token);
    }

    void DeleteUser(User user) {
        Data.DeleteUser(user.Id, token);
    }

    void EditUser(User user) {
        NavigationManager.NavigateTo($"/edituser/{user.Id.ToString()}");
    }

    void CreateUser() {
        NavigationManager.NavigateTo("/createuser");
    }
}
