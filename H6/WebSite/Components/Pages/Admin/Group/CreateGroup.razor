@page "/creategroup"

@using Models
@using Components.Managers

@inject IData Data
@inject ISessionService SessionManager

@if (isAdmin) {
    <h3>Existing Areas</h3>
    <ul>
        @foreach (var area in areas) {
            <li>
                @area.PossibleArea
                <button class="btn btn-danger" @onclick="() => DeleteArea(area.Id)">Delete</button>
            </li>
        }
    </ul>

    <h3>Create Area</h3>

    <EditForm Model="@newArea" OnValidSubmit="HandleValidSubmitArea">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label for="area">Area:</label>
            <InputText id="area" @bind-Value="newArea.PossibleArea" />
        </div>
        <button class="btn btn-success" type="submit">Create Area</button>
    </EditForm>

    <h3>Existing Countries</h3>
    <ul>
        @foreach (var country in countries) {
            <li>
                @country.PossibleCountry
                <button class="btn btn-danger" @onclick="() => DeleteCountry(country.Id)">Delete</button>
            </li>
        }
    </ul>

    <h3>Create Country</h3>

    <EditForm Model="@newCountry" OnValidSubmit="HandleValidSubmitCountry">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label for="country">Country:</label>
            <InputText id="country" @bind-Value="newCountry.PossibleCountry" />
        </div>
        <button class="btn btn-success" type="submit">Create Country</button>
    </EditForm>
} else {
    <p>Not authrorized</p>
}

@code {
    private Area newArea = new Area();
    private Country newCountry = new Country();
    private List<Area> areas = new List<Area>();
    private List<Country> countries = new List<Country>();
    private bool isAdmin;
    private string token;

    protected override async Task OnInitializedAsync() {
        token = SessionManager.GetToken();
        areas = await Data.GetAreas(token);
        countries = await Data.GetCountries(token);
        isAdmin = SessionManager.IsAdmin();
        if (areas == null) {
            areas = new List<Area>();
        }
        if (countries == null) {
            countries = new List<Country>();
        }
    }

    private void HandleValidSubmitArea() {

        Data.AddArea(newArea, token);
        // Reset form
        newArea = new Area();
    }

    private void HandleValidSubmitCountry() {
        Data.AddCountry(newCountry, token);
        newCountry = new Country();
    }

    private void DeleteCountry(int countryId) {
        Data.DeleteCountry(countryId, token);
    }

    private void DeleteArea(int areaId) {
        Data.DeleteArea(areaId, token);
    }
}
