@page "/questions"

@using Models
@using Components.Managers
@inject NavigationManager NavigationManager
@inject IData Data
@inject ISessionService SessionManager

@if (isAdmin) {
    <h3>Questions</h3>

    <button type="button" class="btn btn-primary" @onclick="CreateQuestion">Create New Question</button>

    @if (questions != null && questions.Any()) {
        <table class="table">
            <thead>
                <tr>
                    <th>Question</th>
                    <th>Options</th>
                    <th>Edit</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var question in questions) {
                    <tr>
                        <td>@question.PossibleQuestion</td>
                        <td>@(question.Options.Any() ? "Predefined" : "Free Text")</td>
                        <td><button class="btn btn-primary" @onclick="() => EditQuestion(question)">Edit</button></td>
                        <td><button class="btn btn-danger" @onclick="() => DeleteQuestion(question)">Delete</button></td>
                    </tr>
                }
            </tbody>
        </table>
    } else {
        <p>No questions available.</p>
    }
} else {
    <p>Not authorized</p>
}

@code {
    private List<Question> questions;
    private bool isAdmin;
    private string token;

    protected override async Task OnInitializedAsync() {
        token = SessionManager.GetToken();
        isAdmin = SessionManager.IsAdmin();
        questions = await Data.GetQuestions(token);
    } 

    void EditQuestion(Question question) {
        NavigationManager.NavigateTo($"/editQuestion/{question.Id.ToString()}");
    }


    void DeleteQuestion(Question question) {
        Data.DeleteQuestion(question.Id, token);
    }

    void CreateQuestion() {
        NavigationManager.NavigateTo($"/createNewQuestion");
    }
}